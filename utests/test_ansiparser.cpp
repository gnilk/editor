//
// Created by gnilk on 15.02.24.
//
#include <stdint.h>
#include <testinterface.h>

#include "Core/AnsiParser.h"
#include "Core/HexDump.h"
using namespace gedit;

extern "C" {
DLL_EXPORT int test_ansiparser(ITesting *t);
DLL_EXPORT int test_ansiparser_strip(ITesting *t);
}

DLL_EXPORT int test_ansiparser(ITesting *t) {
    return kTR_Pass;
}

static uint8_t raw_ansi_prompt[]= {
        0x1b, 0x5d, 0x30, 0x3b, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x40, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x2d,
        0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x7e, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70,
        0x72, 0x69, 0x76, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2f,
        0x63, 0x6d, 0x61, 0x6b, 0x65, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x64, 0x65, 0x62, 0x75,
        0x67, 0x07, 0x1b, 0x5b, 0x30, 0x31, 0x3b, 0x33, 0x32, 0x6d, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x40,
        0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x1b, 0x5b, 0x30,
        0x30, 0x6d, 0x3a, 0x1b, 0x5b, 0x30, 0x31, 0x3b, 0x33, 0x34, 0x6d, 0x7e, 0x2f, 0x73, 0x72, 0x63,
        0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x68, 0x65, 0x6c,
        0x6c, 0x2f, 0x63, 0x6d, 0x61, 0x6b, 0x65, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x64, 0x65,
        0x62, 0x75, 0x67, 0x1b, 0x5b, 0x30, 0x30, 0x6d, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static uint8_t raw_ansi_osc[]= {
        0x1b, 0x5d, 0x30, 0x3b, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x40, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x2d,
        0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x7e, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70,
        0x72, 0x69, 0x76, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2f,
        0x63, 0x6d, 0x61, 0x6b, 0x65, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x64, 0x65, 0x62, 0x75,
        0x67, 0x07, 0x1b, 0x5b, 0x30, 0x31, 0x3b, 0x33, 0x32, 0x6d, 0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x40,
        0x67, 0x6e, 0x69, 0x6c, 0x6b, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x1b, 0x5b, 0x30,
        0x30, 0x6d, 0x3a, 0x1b, 0x5b, 0x30, 0x31, 0x3b, 0x33, 0x34, 0x6d, 0x7e, 0x2f, 0x73, 0x72, 0x63,
        0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x68, 0x65, 0x6c,
        0x6c, 0x2f, 0x63, 0x6d, 0x61, 0x6b, 0x65, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x64, 0x65,
        0x62, 0x75, 0x67, 0x1b, 0x5b, 0x30, 0x30, 0x6d, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


DLL_EXPORT int test_ansiparser_strip(ITesting *t) {
    AnsiParser ansiParser;
    fprintf(stdout, "%s\n",raw_ansi_prompt);
    HexDump::ToConsole(raw_ansi_prompt, sizeof(raw_ansi_prompt));
    auto stripped = ansiParser.Parse(raw_ansi_prompt, sizeof (raw_ansi_prompt));
    printf("\nStripped: %s\n", stripped.c_str());

    auto expected = std::string("gnilk@gnilk-desktop:~/src/priv/tests/shell/cmake-build-debug$ ");
    TR_ASSERT(t, stripped == expected);

    return kTR_Pass;
}
